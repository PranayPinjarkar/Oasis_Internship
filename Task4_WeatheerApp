import tkinter as tk
from tkinter import ttk
import requests

class WeatherApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Weather App")

        self.api_key = "457d14d64df9edf4f6c75b591105b3ab"  # Replace with your API key

        self.setup_styles()
        self.create_widgets()

    def setup_styles(self):
        # Create a custom style
        style = ttk.Style()
        style.configure('TLabel', font=('Helvetica', 14, 'bold'), foreground='#333333')
        style.configure('TEntry', font=('Helvetica', 12), foreground='#555555')
        style.configure('TButton', font=('Helvetica', 12, 'bold'), foreground='white', background='#3498db', padding=10)

    def create_widgets(self):
        self.location_label = ttk.Label(self.root, text="Enter Location:")
        self.location_label.grid(row=0, column=0, padx=10, pady=10, sticky="w")

        self.location_entry = ttk.Entry(self.root)
        self.location_entry.grid(row=0, column=1, padx=10, pady=10)

        self.search_button = ttk.Button(self.root, text="Search", command=self.search_weather)
        self.search_button.grid(row=0, column=2, padx=10, pady=10)

        self.result_label = ttk.Label(self.root, text="")
        self.result_label.grid(row=1, column=0, columnspan=3, padx=10, pady=10, sticky="w")

    def search_weather(self):
        location = self.location_entry.get()
        if not location:
            return

        base_url = "http://api.openweathermap.org/data/2.5/weather"
        params = {
            "q": location,
            "appid": self.api_key,
            "units": "metric",  
        }

        try:
            response = requests.get(base_url, params=params)
            response.raise_for_status()  
            data = response.json()

            if response.status_code == 200:
                weather_info = self.parse_weather_data(data)
                self.display_weather(weather_info)
            else:
                self.result_label.config(text="Error: " + data["message"])
        except requests.exceptions.RequestException as e:
            self.result_label.config(text="Error: " + str(e))

    def parse_weather_data(self, data):
        weather_info = {
            "location": data["name"] + ", " + data["sys"]["country"],
            "temperature": data["main"]["temp"],
            "description": data["weather"][0]["description"],
        }
        return weather_info

    def display_weather(self, weather_info):
        result_text = f"Location: {weather_info['location']}\n"
        result_text += f"Temperature: {weather_info['temperature']}Â°C\n"
        result_text += f"Description: {weather_info['description'].capitalize()}\n"

        self.result_label.config(text=result_text)

if __name__ == "__main__":
    root = tk.Tk()
    app = WeatherApp(root)
    root.mainloop()
