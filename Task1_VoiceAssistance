import tkinter as tk
from tkinter import ttk
from gtts import gTTS
import os
import webbrowser
import cv2
import speech_recognition as sr

class VoiceAssistantApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Voice Assistant")

        self.setup_styles()
        self.create_widgets()

    def setup_styles(self):
        style = ttk.Style()
        style.configure('TLabel', font=('Helvetica', 12, 'bold'), foreground='#333333')
        style.configure('TButton', font=('Helvetica', 12, 'bold'), foreground='white', background='#3498db', padding=10)
        style.map('TButton.TButton', background=[('active', '#2980b9')])

    def create_widgets(self):
        self.label = ttk.Label(self.root, text="Voice Assistant", style='TLabel')
        self.label.grid(row=0, column=0, columnspan=3, pady=10)

        self.open_chrome_button = ttk.Button(self.root, text="Open Chrome", command=self.open_chrome, style='TButton.TButton')
        self.open_chrome_button.grid(row=1, column=0, pady=10)

        self.open_youtube_button = ttk.Button(self.root, text="Open YouTube", command=self.open_youtube, style='TButton.TButton')
        self.open_youtube_button.grid(row=1, column=1, pady=10)

        self.open_camera_button = ttk.Button(self.root, text="Open Camera", command=self.open_camera, style='TButton.TButton')
        self.open_camera_button.grid(row=1, column=2, pady=10)

        self.listen_button = ttk.Button(self.root, text="Listen", command=self.listen, style='TButton.TButton')
        self.listen_button.grid(row=2, column=0, columnspan=3, pady=10)

    def speak(self, text):
        tts = gTTS(text=text, lang='en')
        tts.save("output.mp3")
        os.system("start output.mp3")

    def open_chrome(self):
        webbrowser.open("https://www.google.com")

    def open_youtube(self):
        webbrowser.open("https://www.youtube.com")

    def open_camera(self):
        cap = cv2.VideoCapture(0)
        while True:
            ret, frame = cap.read()
            cv2.imshow("Camera", frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        cap.release()
        cv2.destroyAllWindows()

    def listen(self):
        recognizer = sr.Recognizer()

        with sr.Microphone() as source:
            print("Listening...")
            recognizer.adjust_for_ambient_noise(source)
            audio = recognizer.listen(source, timeout=5)

        try:
            print("Recognizing...")
            query = recognizer.recognize_google(audio)
            print(f"User: {query}")
            self.execute_command(query.lower())
        except sr.UnknownValueError:
            self.speak("Sorry, I couldn't understand. Please try again.")
        except sr.RequestError:
            self.speak("There was an error with the speech recognition service. Please try again later.")

    def execute_command(self, command):
        if "open chrome" in command:
            self.open_chrome()
        elif "open youtube" in command:
            self.open_youtube()
        elif "open camera" in command:
            self.open_camera()
        else:
            self.speak("I'm sorry, I don't understand that command.")

if __name__ == "__main__":
    root = tk.Tk()
    app = VoiceAssistantApp(root)
    root.mainloop()
