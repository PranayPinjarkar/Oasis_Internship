import tkinter as tk
from tkinter import messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import sqlite3
from datetime import datetime

class BMICalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("BMI Calculator")
        self.root.geometry("400x500")
        self.root.configure(bg='#E0E0E0')

        self.label_weight = tk.Label(root, text="Weight (kg):", bg='#E0E0E0', font=('Arial', 12))
        self.label_weight.pack()

        self.entry_weight = tk.Entry(root, font=('Arial', 12))
        self.entry_weight.pack()

        self.label_height = tk.Label(root, text="Height (m):", bg='#E0E0E0', font=('Arial', 12))
        self.label_height.pack()

        self.entry_height = tk.Entry(root, font=('Arial', 12))
        self.entry_height.pack()

        self.calculate_button = tk.Button(root, text="Calculate BMI", command=self.calculate_bmi, bg='#4CAF50', fg='white', font=('Arial', 12))
        self.calculate_button.pack(pady=10)

        self.result_label = tk.Label(root, text="", bg='#E0E0E0', font=('Arial', 12, 'bold'))
        self.result_label.pack()

        self.save_button = tk.Button(root, text="Save Data", command=self.save_data, bg='#2196F3', fg='white', font=('Arial', 12))
        self.save_button.pack(pady=10)

        self.view_history_button = tk.Button(root, text="View History", command=self.view_history, bg='#FFC107', fg='black', font=('Arial', 12))
        self.view_history_button.pack(pady=10)

    def calculate_bmi(self):
        try:
            weight = float(self.entry_weight.get())
            height = float(self.entry_height.get())
            bmi = round(weight / (height ** 2), 2)
            result = f"Your BMI is {bmi}\n{self.get_bmi_category(bmi)}"
            self.result_label.config(text=result, fg=self.get_bmi_color(bmi))
            self.plot_bmi_trend(bmi)
        except ValueError:
            messagebox.showerror("Error", "Please enter valid weight and height.")

    def get_bmi_category(self, bmi):
        if bmi < 18.5:
            return "Underweight"
        elif 18.5 <= bmi < 24.9:
            return "Normal Weight"
        elif 25 <= bmi < 29.9:
            return "Overweight"
        else:
            return "Obese"

    def get_bmi_color(self, bmi):
        if bmi < 18.5:
            return 'blue'
        elif 18.5 <= bmi < 24.9:
            return 'green'
        elif 25 <= bmi < 29.9:
            return 'orange'
        else:
            return 'red'

    def save_data(self):
        try:
            weight = float(self.entry_weight.get())
            height = float(self.entry_height.get())
            bmi = round(weight / (height ** 2), 2)

            conn = sqlite3.connect('bmi_data.db')
            c = conn.cursor()

            c.execute("CREATE TABLE IF NOT EXISTS bmi_data (id INTEGER PRIMARY KEY, weight REAL, height REAL, bmi REAL, date TEXT)")
            date_today = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            c.execute("INSERT INTO bmi_data (weight, height, bmi, date) VALUES (?, ?, ?, ?)", (weight, height, bmi, date_today))

            conn.commit()
            conn.close()

            messagebox.showinfo("Success", "Data saved successfully.")
        except ValueError:
            messagebox.showerror("Error", "Please enter valid weight and height.")

    def view_history(self):
        conn = sqlite3.connect('bmi_data.db')
        c = conn.cursor()

        c.execute("SELECT * FROM bmi_data")
        data = c.fetchall()

        conn.close()

        if not data:
            messagebox.showinfo("No Data", "No BMI data available.")
        else:
            self.plot_history(data)

    def plot_bmi_trend(self, bmi):
        plt.clf()
        plt.bar(["BMI"], [bmi], color=[self.get_bmi_color(bmi)])
        plt.title("BMI Trend")
        plt.ylabel("BMI")
        plt.show()

    def plot_history(self, data):
        plt.clf()
        dates = [entry[4] for entry in data]
        bmis = [entry[3] for entry in data]
        plt.plot(dates, bmis, marker='o', linestyle='-', color='b')
        plt.title("BMI History")
        plt.xlabel("Date")
        plt.ylabel("BMI")
        plt.xticks(rotation=45, ha="right")
        plt.tight_layout()

        fig = plt.gcf()
        canvas = FigureCanvasTkAgg(fig, master=self.root)
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.pack()

if __name__ == "__main__":
    root = tk.Tk()
    app = BMICalculator(root)
    root.mainloop()
